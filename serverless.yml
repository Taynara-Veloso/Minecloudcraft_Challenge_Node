org: taynaravelosoproject
app: challenge-fullstack
service: serverless-game-sessions-new
frameworkVersion: "4"

custom:
  tableName: "GameSessionsTable-${sls:stage}"

provider:
  name: aws
  region: us-east-1
  deploymentBucket:
    name: gamesessionbucket
  runtime: nodejs20.x
  profile: default
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - apigateway:POST
            - apigateway:PUT
            - apigateway:GET
            - apigateway:DELETE
            - apigateway:PATCH
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - iam:CreateRole
            - iam:AttachRolePolicy
            - iam:PutRolePolicy
            - iam:TagRole
            - iam:GetRole
            - iam:ListAttachedRolePolicies
          Resource:
            - "*"
            - Fn::GetAtt: [GameSessionsTable, Arn]
  environment:
    GAMESESSION_TABLE: ${self:custom.tableName}

functions:
  GameSession:
    handler: handler.handler
    events:
      - httpApi: "*"

resources:
  Resources:
    GameSessionsTable:
        Type: 'AWS::DynamoDB::Table'
        Properties:
          AttributeDefinitions:
            - AttributeName: 'sessionId'
              AttributeType: 'S'
          KeySchema:
            - AttributeName: 'sessionId'
              KeyType: 'HASH'
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:custom.tableName}
